{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ShippingRate
module StripeAPI.Types.ShippingRate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ShippingRateDeliveryEstimate
import {-# SOURCE #-} StripeAPI.Types.ShippingRateDeliveryEstimateBound
import {-# SOURCE #-} StripeAPI.Types.ShippingRateFixedAmount
import {-# SOURCE #-} StripeAPI.Types.TaxCode
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.shipping_rate@ in the specification.
--
-- Shipping rates describe the price of shipping presented to your customers and can be
-- applied to [Checkout Sessions](https:\/\/stripe.com\/docs\/payments\/checkout\/shipping) to collect shipping costs.
data ShippingRate = ShippingRate
  { -- | active: Whether the shipping rate can be used for new purchases. Defaults to \`true\`.
    shippingRateActive :: GHC.Types.Bool,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    shippingRateCreated :: GHC.Types.Int,
    -- | delivery_estimate: The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
    shippingRateDeliveryEstimate :: (GHC.Maybe.Maybe ShippingRateDeliveryEstimate'),
    -- | display_name: The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    shippingRateDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | fixed_amount:
    shippingRateFixedAmount :: (GHC.Maybe.Maybe ShippingRateFixedAmount),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    shippingRateId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    shippingRateLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    shippingRateMetadata :: Data.Aeson.Types.Internal.Object,
    -- | tax_behavior: Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of \`inclusive\`, \`exclusive\`, or \`unspecified\`.
    shippingRateTaxBehavior :: (GHC.Maybe.Maybe ShippingRateTaxBehavior'),
    -- | tax_code: A [tax code](https:\/\/stripe.com\/docs\/tax\/tax-codes) ID. The Shipping tax code is \`txcd_92010001\`.
    shippingRateTaxCode :: (GHC.Maybe.Maybe ShippingRateTaxCode'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRate where
  toJSON obj = Data.Aeson.Types.Internal.object ("active" Data.Aeson.Types.ToJSON..= shippingRateActive obj : "created" Data.Aeson.Types.ToJSON..= shippingRateCreated obj : "delivery_estimate" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate obj : "display_name" Data.Aeson.Types.ToJSON..= shippingRateDisplayName obj : "fixed_amount" Data.Aeson.Types.ToJSON..= shippingRateFixedAmount obj : "id" Data.Aeson.Types.ToJSON..= shippingRateId obj : "livemode" Data.Aeson.Types.ToJSON..= shippingRateLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= shippingRateMetadata obj : "tax_behavior" Data.Aeson.Types.ToJSON..= shippingRateTaxBehavior obj : "tax_code" Data.Aeson.Types.ToJSON..= shippingRateTaxCode obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shipping_rate" : "type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "fixed_amount" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("active" Data.Aeson.Types.ToJSON..= shippingRateActive obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= shippingRateCreated obj) GHC.Base.<> (("delivery_estimate" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate obj) GHC.Base.<> (("display_name" Data.Aeson.Types.ToJSON..= shippingRateDisplayName obj) GHC.Base.<> (("fixed_amount" Data.Aeson.Types.ToJSON..= shippingRateFixedAmount obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= shippingRateId obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= shippingRateLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= shippingRateMetadata obj) GHC.Base.<> (("tax_behavior" Data.Aeson.Types.ToJSON..= shippingRateTaxBehavior obj) GHC.Base.<> (("tax_code" Data.Aeson.Types.ToJSON..= shippingRateTaxCode obj) GHC.Base.<> (("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "shipping_rate") GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "fixed_amount"))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRate where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingRate" (\obj -> (((((((((GHC.Base.pure ShippingRate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delivery_estimate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fixed_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_code"))

-- | Create a new 'ShippingRate' with all required fields.
mkShippingRate ::
  -- | 'shippingRateActive'
  GHC.Types.Bool ->
  -- | 'shippingRateCreated'
  GHC.Types.Int ->
  -- | 'shippingRateId'
  Data.Text.Internal.Text ->
  -- | 'shippingRateLivemode'
  GHC.Types.Bool ->
  -- | 'shippingRateMetadata'
  Data.Aeson.Types.Internal.Object ->
  ShippingRate
mkShippingRate shippingRateActive shippingRateCreated shippingRateId shippingRateLivemode shippingRateMetadata =
  ShippingRate
    { shippingRateActive = shippingRateActive,
      shippingRateCreated = shippingRateCreated,
      shippingRateDeliveryEstimate = GHC.Maybe.Nothing,
      shippingRateDisplayName = GHC.Maybe.Nothing,
      shippingRateFixedAmount = GHC.Maybe.Nothing,
      shippingRateId = shippingRateId,
      shippingRateLivemode = shippingRateLivemode,
      shippingRateMetadata = shippingRateMetadata,
      shippingRateTaxBehavior = GHC.Maybe.Nothing,
      shippingRateTaxCode = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.shipping_rate.properties.delivery_estimate.anyOf@ in the specification.
--
-- The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
data ShippingRateDeliveryEstimate' = ShippingRateDeliveryEstimate'
  { -- | maximum: The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
    shippingRateDeliveryEstimate'Maximum :: (GHC.Maybe.Maybe ShippingRateDeliveryEstimate'Maximum'),
    -- | minimum: The lower bound of the estimated range. If empty, represents no lower bound.
    shippingRateDeliveryEstimate'Minimum :: (GHC.Maybe.Maybe ShippingRateDeliveryEstimate'Minimum')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateDeliveryEstimate' where
  toJSON obj = Data.Aeson.Types.Internal.object ("maximum" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum obj : "minimum" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("maximum" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum obj) GHC.Base.<> ("minimum" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum obj))

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateDeliveryEstimate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingRateDeliveryEstimate'" (\obj -> (GHC.Base.pure ShippingRateDeliveryEstimate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "maximum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "minimum"))

-- | Create a new 'ShippingRateDeliveryEstimate'' with all required fields.
mkShippingRateDeliveryEstimate' :: ShippingRateDeliveryEstimate'
mkShippingRateDeliveryEstimate' =
  ShippingRateDeliveryEstimate'
    { shippingRateDeliveryEstimate'Maximum = GHC.Maybe.Nothing,
      shippingRateDeliveryEstimate'Minimum = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.shipping_rate.properties.delivery_estimate.anyOf.properties.maximum.anyOf@ in the specification.
--
-- The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
data ShippingRateDeliveryEstimate'Maximum' = ShippingRateDeliveryEstimate'Maximum'
  { -- | unit: A unit of time.
    shippingRateDeliveryEstimate'Maximum'Unit :: (GHC.Maybe.Maybe ShippingRateDeliveryEstimate'Maximum'Unit'),
    -- | value: Must be greater than 0.
    shippingRateDeliveryEstimate'Maximum'Value :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateDeliveryEstimate'Maximum' where
  toJSON obj = Data.Aeson.Types.Internal.object ("unit" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum'Unit obj : "value" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum'Value obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("unit" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum'Unit obj) GHC.Base.<> ("value" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Maximum'Value obj))

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateDeliveryEstimate'Maximum' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingRateDeliveryEstimate'Maximum'" (\obj -> (GHC.Base.pure ShippingRateDeliveryEstimate'Maximum' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "value"))

-- | Create a new 'ShippingRateDeliveryEstimate'Maximum'' with all required fields.
mkShippingRateDeliveryEstimate'Maximum' :: ShippingRateDeliveryEstimate'Maximum'
mkShippingRateDeliveryEstimate'Maximum' =
  ShippingRateDeliveryEstimate'Maximum'
    { shippingRateDeliveryEstimate'Maximum'Unit = GHC.Maybe.Nothing,
      shippingRateDeliveryEstimate'Maximum'Value = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.shipping_rate.properties.delivery_estimate.anyOf.properties.maximum.anyOf.properties.unit@ in the specification.
--
-- A unit of time.
data ShippingRateDeliveryEstimate'Maximum'Unit'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ShippingRateDeliveryEstimate'Maximum'Unit'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ShippingRateDeliveryEstimate'Maximum'Unit'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"business_day"@
    ShippingRateDeliveryEstimate'Maximum'Unit'EnumBusinessDay
  | -- | Represents the JSON value @"day"@
    ShippingRateDeliveryEstimate'Maximum'Unit'EnumDay
  | -- | Represents the JSON value @"hour"@
    ShippingRateDeliveryEstimate'Maximum'Unit'EnumHour
  | -- | Represents the JSON value @"month"@
    ShippingRateDeliveryEstimate'Maximum'Unit'EnumMonth
  | -- | Represents the JSON value @"week"@
    ShippingRateDeliveryEstimate'Maximum'Unit'EnumWeek
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateDeliveryEstimate'Maximum'Unit' where
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'Other val) = val
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'EnumBusinessDay) = "business_day"
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'EnumDay) = "day"
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'EnumHour) = "hour"
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'EnumMonth) = "month"
  toJSON (ShippingRateDeliveryEstimate'Maximum'Unit'EnumWeek) = "week"

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateDeliveryEstimate'Maximum'Unit' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "business_day" -> ShippingRateDeliveryEstimate'Maximum'Unit'EnumBusinessDay
            | val GHC.Classes.== "day" -> ShippingRateDeliveryEstimate'Maximum'Unit'EnumDay
            | val GHC.Classes.== "hour" -> ShippingRateDeliveryEstimate'Maximum'Unit'EnumHour
            | val GHC.Classes.== "month" -> ShippingRateDeliveryEstimate'Maximum'Unit'EnumMonth
            | val GHC.Classes.== "week" -> ShippingRateDeliveryEstimate'Maximum'Unit'EnumWeek
            | GHC.Base.otherwise -> ShippingRateDeliveryEstimate'Maximum'Unit'Other val
      )

-- | Defines the object schema located at @components.schemas.shipping_rate.properties.delivery_estimate.anyOf.properties.minimum.anyOf@ in the specification.
--
-- The lower bound of the estimated range. If empty, represents no lower bound.
data ShippingRateDeliveryEstimate'Minimum' = ShippingRateDeliveryEstimate'Minimum'
  { -- | unit: A unit of time.
    shippingRateDeliveryEstimate'Minimum'Unit :: (GHC.Maybe.Maybe ShippingRateDeliveryEstimate'Minimum'Unit'),
    -- | value: Must be greater than 0.
    shippingRateDeliveryEstimate'Minimum'Value :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateDeliveryEstimate'Minimum' where
  toJSON obj = Data.Aeson.Types.Internal.object ("unit" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum'Unit obj : "value" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum'Value obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("unit" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum'Unit obj) GHC.Base.<> ("value" Data.Aeson.Types.ToJSON..= shippingRateDeliveryEstimate'Minimum'Value obj))

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateDeliveryEstimate'Minimum' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingRateDeliveryEstimate'Minimum'" (\obj -> (GHC.Base.pure ShippingRateDeliveryEstimate'Minimum' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "value"))

-- | Create a new 'ShippingRateDeliveryEstimate'Minimum'' with all required fields.
mkShippingRateDeliveryEstimate'Minimum' :: ShippingRateDeliveryEstimate'Minimum'
mkShippingRateDeliveryEstimate'Minimum' =
  ShippingRateDeliveryEstimate'Minimum'
    { shippingRateDeliveryEstimate'Minimum'Unit = GHC.Maybe.Nothing,
      shippingRateDeliveryEstimate'Minimum'Value = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.shipping_rate.properties.delivery_estimate.anyOf.properties.minimum.anyOf.properties.unit@ in the specification.
--
-- A unit of time.
data ShippingRateDeliveryEstimate'Minimum'Unit'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ShippingRateDeliveryEstimate'Minimum'Unit'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ShippingRateDeliveryEstimate'Minimum'Unit'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"business_day"@
    ShippingRateDeliveryEstimate'Minimum'Unit'EnumBusinessDay
  | -- | Represents the JSON value @"day"@
    ShippingRateDeliveryEstimate'Minimum'Unit'EnumDay
  | -- | Represents the JSON value @"hour"@
    ShippingRateDeliveryEstimate'Minimum'Unit'EnumHour
  | -- | Represents the JSON value @"month"@
    ShippingRateDeliveryEstimate'Minimum'Unit'EnumMonth
  | -- | Represents the JSON value @"week"@
    ShippingRateDeliveryEstimate'Minimum'Unit'EnumWeek
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateDeliveryEstimate'Minimum'Unit' where
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'Other val) = val
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'EnumBusinessDay) = "business_day"
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'EnumDay) = "day"
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'EnumHour) = "hour"
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'EnumMonth) = "month"
  toJSON (ShippingRateDeliveryEstimate'Minimum'Unit'EnumWeek) = "week"

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateDeliveryEstimate'Minimum'Unit' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "business_day" -> ShippingRateDeliveryEstimate'Minimum'Unit'EnumBusinessDay
            | val GHC.Classes.== "day" -> ShippingRateDeliveryEstimate'Minimum'Unit'EnumDay
            | val GHC.Classes.== "hour" -> ShippingRateDeliveryEstimate'Minimum'Unit'EnumHour
            | val GHC.Classes.== "month" -> ShippingRateDeliveryEstimate'Minimum'Unit'EnumMonth
            | val GHC.Classes.== "week" -> ShippingRateDeliveryEstimate'Minimum'Unit'EnumWeek
            | GHC.Base.otherwise -> ShippingRateDeliveryEstimate'Minimum'Unit'Other val
      )

-- | Defines the enum schema located at @components.schemas.shipping_rate.properties.tax_behavior@ in the specification.
--
-- Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of \`inclusive\`, \`exclusive\`, or \`unspecified\`.
data ShippingRateTaxBehavior'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ShippingRateTaxBehavior'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ShippingRateTaxBehavior'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    ShippingRateTaxBehavior'EnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    ShippingRateTaxBehavior'EnumInclusive
  | -- | Represents the JSON value @"unspecified"@
    ShippingRateTaxBehavior'EnumUnspecified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateTaxBehavior' where
  toJSON (ShippingRateTaxBehavior'Other val) = val
  toJSON (ShippingRateTaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ShippingRateTaxBehavior'EnumExclusive) = "exclusive"
  toJSON (ShippingRateTaxBehavior'EnumInclusive) = "inclusive"
  toJSON (ShippingRateTaxBehavior'EnumUnspecified) = "unspecified"

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateTaxBehavior' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> ShippingRateTaxBehavior'EnumExclusive
            | val GHC.Classes.== "inclusive" -> ShippingRateTaxBehavior'EnumInclusive
            | val GHC.Classes.== "unspecified" -> ShippingRateTaxBehavior'EnumUnspecified
            | GHC.Base.otherwise -> ShippingRateTaxBehavior'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.shipping_rate.properties.tax_code.anyOf@ in the specification.
--
-- A [tax code](https:\/\/stripe.com\/docs\/tax\/tax-codes) ID. The Shipping tax code is \`txcd_92010001\`.
data ShippingRateTaxCode'Variants
  = ShippingRateTaxCode'Text Data.Text.Internal.Text
  | ShippingRateTaxCode'TaxCode TaxCode
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ShippingRateTaxCode'Variants where
  toJSON (ShippingRateTaxCode'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ShippingRateTaxCode'TaxCode a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ShippingRateTaxCode'Variants where
  parseJSON val = case (ShippingRateTaxCode'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ShippingRateTaxCode'TaxCode Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
