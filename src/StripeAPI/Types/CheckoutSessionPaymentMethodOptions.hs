{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CheckoutSessionPaymentMethodOptions
module StripeAPI.Types.CheckoutSessionPaymentMethodOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CheckoutAcssDebitPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsBoleto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsOxxo
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.checkout_session_payment_method_options@ in the specification.
data CheckoutSessionPaymentMethodOptions = CheckoutSessionPaymentMethodOptions
  { -- | acss_debit:
    checkoutSessionPaymentMethodOptionsAcssDebit :: (GHC.Maybe.Maybe CheckoutAcssDebitPaymentMethodOptions),
    -- | boleto:
    checkoutSessionPaymentMethodOptionsBoleto :: (GHC.Maybe.Maybe PaymentMethodOptionsBoleto),
    -- | oxxo:
    checkoutSessionPaymentMethodOptionsOxxo :: (GHC.Maybe.Maybe PaymentMethodOptionsOxxo)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutSessionPaymentMethodOptions where
  toJSON obj = Data.Aeson.Types.Internal.object ("acss_debit" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsAcssDebit obj : "boleto" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsBoleto obj : "oxxo" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsOxxo obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acss_debit" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsAcssDebit obj) GHC.Base.<> (("boleto" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsBoleto obj) GHC.Base.<> ("oxxo" Data.Aeson.Types.ToJSON..= checkoutSessionPaymentMethodOptionsOxxo obj)))

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutSessionPaymentMethodOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CheckoutSessionPaymentMethodOptions" (\obj -> ((GHC.Base.pure CheckoutSessionPaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "boleto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "oxxo"))

-- | Create a new 'CheckoutSessionPaymentMethodOptions' with all required fields.
mkCheckoutSessionPaymentMethodOptions :: CheckoutSessionPaymentMethodOptions
mkCheckoutSessionPaymentMethodOptions =
  CheckoutSessionPaymentMethodOptions
    { checkoutSessionPaymentMethodOptionsAcssDebit = GHC.Maybe.Nothing,
      checkoutSessionPaymentMethodOptionsBoleto = GHC.Maybe.Nothing,
      checkoutSessionPaymentMethodOptionsOxxo = GHC.Maybe.Nothing
    }
