{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodKlarna
module StripeAPI.Types.PaymentMethodKlarna where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsKlarnaDob
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_klarna@ in the specification.
data PaymentMethodKlarna = PaymentMethodKlarna
  { -- | dob: The customer\'s date of birth, if provided.
    paymentMethodKlarnaDob :: (GHC.Maybe.Maybe PaymentMethodKlarnaDob')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodKlarna where
  toJSON obj = Data.Aeson.Types.Internal.object ("dob" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("dob" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob obj)

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodKlarna where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodKlarna" (\obj -> GHC.Base.pure PaymentMethodKlarna GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob"))

-- | Create a new 'PaymentMethodKlarna' with all required fields.
mkPaymentMethodKlarna :: PaymentMethodKlarna
mkPaymentMethodKlarna = PaymentMethodKlarna {paymentMethodKlarnaDob = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.payment_method_klarna.properties.dob.anyOf@ in the specification.
--
-- The customer\\\'s date of birth, if provided.
data PaymentMethodKlarnaDob' = PaymentMethodKlarnaDob'
  { -- | day: The day of birth, between 1 and 31.
    paymentMethodKlarnaDob'Day :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | month: The month of birth, between 1 and 12.
    paymentMethodKlarnaDob'Month :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | year: The four-digit year of birth.
    paymentMethodKlarnaDob'Year :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodKlarnaDob' where
  toJSON obj = Data.Aeson.Types.Internal.object ("day" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Day obj : "month" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Month obj : "year" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Year obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("day" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Day obj) GHC.Base.<> (("month" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Month obj) GHC.Base.<> ("year" Data.Aeson.Types.ToJSON..= paymentMethodKlarnaDob'Year obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodKlarnaDob' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodKlarnaDob'" (\obj -> ((GHC.Base.pure PaymentMethodKlarnaDob' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "year"))

-- | Create a new 'PaymentMethodKlarnaDob'' with all required fields.
mkPaymentMethodKlarnaDob' :: PaymentMethodKlarnaDob'
mkPaymentMethodKlarnaDob' =
  PaymentMethodKlarnaDob'
    { paymentMethodKlarnaDob'Day = GHC.Maybe.Nothing,
      paymentMethodKlarnaDob'Month = GHC.Maybe.Nothing,
      paymentMethodKlarnaDob'Year = GHC.Maybe.Nothing
    }
