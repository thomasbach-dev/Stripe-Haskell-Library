{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Quote
module StripeAPI.Types.Quote where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.DeletedInvoice
import {-# SOURCE #-} StripeAPI.Types.Discount
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.InvoiceSettingQuoteSetting
import {-# SOURCE #-} StripeAPI.Types.Item
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceAutomaticTax
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceComputed
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceFromQuote
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceSubscriptionData
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTotalDetails
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTransferData
import {-# SOURCE #-} StripeAPI.Types.Subscription
import {-# SOURCE #-} StripeAPI.Types.SubscriptionSchedule
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.quote@ in the specification.
--
-- A Quote is a way to model prices that you\'d like to provide to a customer.
-- Once accepted, it will automatically create an invoice, subscription or subscription schedule.
data Quote = Quote
  { -- | amount_subtotal: Total before any discounts or taxes are applied.
    quoteAmountSubtotal :: GHC.Types.Int,
    -- | amount_total: Total after discounts and taxes are applied.
    quoteAmountTotal :: GHC.Types.Int,
    -- | application_fee_amount: The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. Only applicable if there are no line items with recurring prices on the quote.
    quoteApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | application_fee_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. Only applicable if there are line items with recurring prices on the quote.
    quoteApplicationFeePercent :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | automatic_tax:
    quoteAutomaticTax :: QuotesResourceAutomaticTax,
    -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
    quoteCollectionMethod :: QuoteCollectionMethod',
    -- | computed:
    quoteComputed :: QuotesResourceComputed,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    quoteCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    quoteCustomer :: (GHC.Maybe.Maybe QuoteCustomer'Variants),
    -- | default_tax_rates: The tax rates applied to this quote.
    quoteDefaultTaxRates :: (GHC.Maybe.Maybe ([QuoteDefaultTaxRates'Variants])),
    -- | description: A description that will be displayed on the quote PDF.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | discounts: The discounts applied to this quote.
    quoteDiscounts :: ([QuoteDiscounts'Variants]),
    -- | expires_at: The date on which the quote will be canceled if in \`open\` or \`draft\` status. Measured in seconds since the Unix epoch.
    quoteExpiresAt :: GHC.Types.Int,
    -- | footer: A footer that will be displayed on the quote PDF.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteFooter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | from_quote: Details of the quote that was cloned. See the [cloning documentation](https:\/\/stripe.com\/docs\/quotes\/clone) for more details.
    quoteFromQuote :: (GHC.Maybe.Maybe QuoteFromQuote'),
    -- | header: A header that will be displayed on the quote PDF.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteHeader :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteId :: Data.Text.Internal.Text,
    -- | invoice: The invoice that was created from this quote.
    quoteInvoice :: (GHC.Maybe.Maybe QuoteInvoice'Variants),
    -- | invoice_settings: All invoices will be billed using the specified settings.
    quoteInvoiceSettings :: (GHC.Maybe.Maybe QuoteInvoiceSettings'),
    -- | line_items: A list of items the customer is being quoted for.
    quoteLineItems :: (GHC.Maybe.Maybe QuoteLineItems'),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    quoteLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    quoteMetadata :: Data.Aeson.Types.Internal.Object,
    -- | number: A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https:\/\/stripe.com\/docs\/quotes\/overview\#finalize).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | on_behalf_of: The account on behalf of which to charge. See the [Connect documentation](https:\/\/support.stripe.com\/questions\/sending-invoices-on-behalf-of-connected-accounts) for details.
    quoteOnBehalfOf :: (GHC.Maybe.Maybe QuoteOnBehalfOf'Variants),
    -- | status: The status of the quote.
    quoteStatus :: QuoteStatus',
    -- | status_transitions:
    quoteStatusTransitions :: QuotesResourceStatusTransitions,
    -- | subscription: The subscription that was created or updated from this quote.
    quoteSubscription :: (GHC.Maybe.Maybe QuoteSubscription'Variants),
    -- | subscription_data:
    quoteSubscriptionData :: QuotesResourceSubscriptionData,
    -- | subscription_schedule: The subscription schedule that was created or updated from this quote.
    quoteSubscriptionSchedule :: (GHC.Maybe.Maybe QuoteSubscriptionSchedule'Variants),
    -- | total_details:
    quoteTotalDetails :: QuotesResourceTotalDetails,
    -- | transfer_data: The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
    quoteTransferData :: (GHC.Maybe.Maybe QuoteTransferData')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Quote where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount_subtotal" Data.Aeson.Types.ToJSON..= quoteAmountSubtotal obj : "amount_total" Data.Aeson.Types.ToJSON..= quoteAmountTotal obj : "application_fee_amount" Data.Aeson.Types.ToJSON..= quoteApplicationFeeAmount obj : "application_fee_percent" Data.Aeson.Types.ToJSON..= quoteApplicationFeePercent obj : "automatic_tax" Data.Aeson.Types.ToJSON..= quoteAutomaticTax obj : "collection_method" Data.Aeson.Types.ToJSON..= quoteCollectionMethod obj : "computed" Data.Aeson.Types.ToJSON..= quoteComputed obj : "created" Data.Aeson.Types.ToJSON..= quoteCreated obj : "currency" Data.Aeson.Types.ToJSON..= quoteCurrency obj : "customer" Data.Aeson.Types.ToJSON..= quoteCustomer obj : "default_tax_rates" Data.Aeson.Types.ToJSON..= quoteDefaultTaxRates obj : "description" Data.Aeson.Types.ToJSON..= quoteDescription obj : "discounts" Data.Aeson.Types.ToJSON..= quoteDiscounts obj : "expires_at" Data.Aeson.Types.ToJSON..= quoteExpiresAt obj : "footer" Data.Aeson.Types.ToJSON..= quoteFooter obj : "from_quote" Data.Aeson.Types.ToJSON..= quoteFromQuote obj : "header" Data.Aeson.Types.ToJSON..= quoteHeader obj : "id" Data.Aeson.Types.ToJSON..= quoteId obj : "invoice" Data.Aeson.Types.ToJSON..= quoteInvoice obj : "invoice_settings" Data.Aeson.Types.ToJSON..= quoteInvoiceSettings obj : "line_items" Data.Aeson.Types.ToJSON..= quoteLineItems obj : "livemode" Data.Aeson.Types.ToJSON..= quoteLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= quoteMetadata obj : "number" Data.Aeson.Types.ToJSON..= quoteNumber obj : "on_behalf_of" Data.Aeson.Types.ToJSON..= quoteOnBehalfOf obj : "status" Data.Aeson.Types.ToJSON..= quoteStatus obj : "status_transitions" Data.Aeson.Types.ToJSON..= quoteStatusTransitions obj : "subscription" Data.Aeson.Types.ToJSON..= quoteSubscription obj : "subscription_data" Data.Aeson.Types.ToJSON..= quoteSubscriptionData obj : "subscription_schedule" Data.Aeson.Types.ToJSON..= quoteSubscriptionSchedule obj : "total_details" Data.Aeson.Types.ToJSON..= quoteTotalDetails obj : "transfer_data" Data.Aeson.Types.ToJSON..= quoteTransferData obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "quote" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount_subtotal" Data.Aeson.Types.ToJSON..= quoteAmountSubtotal obj) GHC.Base.<> (("amount_total" Data.Aeson.Types.ToJSON..= quoteAmountTotal obj) GHC.Base.<> (("application_fee_amount" Data.Aeson.Types.ToJSON..= quoteApplicationFeeAmount obj) GHC.Base.<> (("application_fee_percent" Data.Aeson.Types.ToJSON..= quoteApplicationFeePercent obj) GHC.Base.<> (("automatic_tax" Data.Aeson.Types.ToJSON..= quoteAutomaticTax obj) GHC.Base.<> (("collection_method" Data.Aeson.Types.ToJSON..= quoteCollectionMethod obj) GHC.Base.<> (("computed" Data.Aeson.Types.ToJSON..= quoteComputed obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= quoteCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= quoteCurrency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= quoteCustomer obj) GHC.Base.<> (("default_tax_rates" Data.Aeson.Types.ToJSON..= quoteDefaultTaxRates obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= quoteDescription obj) GHC.Base.<> (("discounts" Data.Aeson.Types.ToJSON..= quoteDiscounts obj) GHC.Base.<> (("expires_at" Data.Aeson.Types.ToJSON..= quoteExpiresAt obj) GHC.Base.<> (("footer" Data.Aeson.Types.ToJSON..= quoteFooter obj) GHC.Base.<> (("from_quote" Data.Aeson.Types.ToJSON..= quoteFromQuote obj) GHC.Base.<> (("header" Data.Aeson.Types.ToJSON..= quoteHeader obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= quoteId obj) GHC.Base.<> (("invoice" Data.Aeson.Types.ToJSON..= quoteInvoice obj) GHC.Base.<> (("invoice_settings" Data.Aeson.Types.ToJSON..= quoteInvoiceSettings obj) GHC.Base.<> (("line_items" Data.Aeson.Types.ToJSON..= quoteLineItems obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= quoteLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= quoteMetadata obj) GHC.Base.<> (("number" Data.Aeson.Types.ToJSON..= quoteNumber obj) GHC.Base.<> (("on_behalf_of" Data.Aeson.Types.ToJSON..= quoteOnBehalfOf obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= quoteStatus obj) GHC.Base.<> (("status_transitions" Data.Aeson.Types.ToJSON..= quoteStatusTransitions obj) GHC.Base.<> (("subscription" Data.Aeson.Types.ToJSON..= quoteSubscription obj) GHC.Base.<> (("subscription_data" Data.Aeson.Types.ToJSON..= quoteSubscriptionData obj) GHC.Base.<> (("subscription_schedule" Data.Aeson.Types.ToJSON..= quoteSubscriptionSchedule obj) GHC.Base.<> (("total_details" Data.Aeson.Types.ToJSON..= quoteTotalDetails obj) GHC.Base.<> (("transfer_data" Data.Aeson.Types.ToJSON..= quoteTransferData obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "quote")))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Quote where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Quote" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure Quote GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "automatic_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "computed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "from_quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "header")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subscription_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_schedule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_data"))

-- | Create a new 'Quote' with all required fields.
mkQuote ::
  -- | 'quoteAmountSubtotal'
  GHC.Types.Int ->
  -- | 'quoteAmountTotal'
  GHC.Types.Int ->
  -- | 'quoteAutomaticTax'
  QuotesResourceAutomaticTax ->
  -- | 'quoteCollectionMethod'
  QuoteCollectionMethod' ->
  -- | 'quoteComputed'
  QuotesResourceComputed ->
  -- | 'quoteCreated'
  GHC.Types.Int ->
  -- | 'quoteDiscounts'
  [QuoteDiscounts'Variants] ->
  -- | 'quoteExpiresAt'
  GHC.Types.Int ->
  -- | 'quoteId'
  Data.Text.Internal.Text ->
  -- | 'quoteLivemode'
  GHC.Types.Bool ->
  -- | 'quoteMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'quoteStatus'
  QuoteStatus' ->
  -- | 'quoteStatusTransitions'
  QuotesResourceStatusTransitions ->
  -- | 'quoteSubscriptionData'
  QuotesResourceSubscriptionData ->
  -- | 'quoteTotalDetails'
  QuotesResourceTotalDetails ->
  Quote
mkQuote quoteAmountSubtotal quoteAmountTotal quoteAutomaticTax quoteCollectionMethod quoteComputed quoteCreated quoteDiscounts quoteExpiresAt quoteId quoteLivemode quoteMetadata quoteStatus quoteStatusTransitions quoteSubscriptionData quoteTotalDetails =
  Quote
    { quoteAmountSubtotal = quoteAmountSubtotal,
      quoteAmountTotal = quoteAmountTotal,
      quoteApplicationFeeAmount = GHC.Maybe.Nothing,
      quoteApplicationFeePercent = GHC.Maybe.Nothing,
      quoteAutomaticTax = quoteAutomaticTax,
      quoteCollectionMethod = quoteCollectionMethod,
      quoteComputed = quoteComputed,
      quoteCreated = quoteCreated,
      quoteCurrency = GHC.Maybe.Nothing,
      quoteCustomer = GHC.Maybe.Nothing,
      quoteDefaultTaxRates = GHC.Maybe.Nothing,
      quoteDescription = GHC.Maybe.Nothing,
      quoteDiscounts = quoteDiscounts,
      quoteExpiresAt = quoteExpiresAt,
      quoteFooter = GHC.Maybe.Nothing,
      quoteFromQuote = GHC.Maybe.Nothing,
      quoteHeader = GHC.Maybe.Nothing,
      quoteId = quoteId,
      quoteInvoice = GHC.Maybe.Nothing,
      quoteInvoiceSettings = GHC.Maybe.Nothing,
      quoteLineItems = GHC.Maybe.Nothing,
      quoteLivemode = quoteLivemode,
      quoteMetadata = quoteMetadata,
      quoteNumber = GHC.Maybe.Nothing,
      quoteOnBehalfOf = GHC.Maybe.Nothing,
      quoteStatus = quoteStatus,
      quoteStatusTransitions = quoteStatusTransitions,
      quoteSubscription = GHC.Maybe.Nothing,
      quoteSubscriptionData = quoteSubscriptionData,
      quoteSubscriptionSchedule = GHC.Maybe.Nothing,
      quoteTotalDetails = quoteTotalDetails,
      quoteTransferData = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.quote.properties.collection_method@ in the specification.
--
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
data QuoteCollectionMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    QuoteCollectionMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    QuoteCollectionMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"charge_automatically"@
    QuoteCollectionMethod'EnumChargeAutomatically
  | -- | Represents the JSON value @"send_invoice"@
    QuoteCollectionMethod'EnumSendInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteCollectionMethod' where
  toJSON (QuoteCollectionMethod'Other val) = val
  toJSON (QuoteCollectionMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (QuoteCollectionMethod'EnumChargeAutomatically) = "charge_automatically"
  toJSON (QuoteCollectionMethod'EnumSendInvoice) = "send_invoice"

instance Data.Aeson.Types.FromJSON.FromJSON QuoteCollectionMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "charge_automatically" -> QuoteCollectionMethod'EnumChargeAutomatically
            | val GHC.Classes.== "send_invoice" -> QuoteCollectionMethod'EnumSendInvoice
            | GHC.Base.otherwise -> QuoteCollectionMethod'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.quote.properties.customer.anyOf@ in the specification.
--
-- The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
data QuoteCustomer'Variants
  = QuoteCustomer'Text Data.Text.Internal.Text
  | QuoteCustomer'Customer Customer
  | QuoteCustomer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteCustomer'Variants where
  toJSON (QuoteCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteCustomer'Variants where
  parseJSON val = case (QuoteCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteCustomer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.quote.properties.default_tax_rates.items.anyOf@ in the specification.
data QuoteDefaultTaxRates'Variants
  = QuoteDefaultTaxRates'Text Data.Text.Internal.Text
  | QuoteDefaultTaxRates'TaxRate TaxRate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteDefaultTaxRates'Variants where
  toJSON (QuoteDefaultTaxRates'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteDefaultTaxRates'TaxRate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteDefaultTaxRates'Variants where
  parseJSON val = case (QuoteDefaultTaxRates'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteDefaultTaxRates'TaxRate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.quote.properties.discounts.items.anyOf@ in the specification.
data QuoteDiscounts'Variants
  = QuoteDiscounts'Text Data.Text.Internal.Text
  | QuoteDiscounts'Discount Discount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteDiscounts'Variants where
  toJSON (QuoteDiscounts'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteDiscounts'Discount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteDiscounts'Variants where
  parseJSON val = case (QuoteDiscounts'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteDiscounts'Discount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.quote.properties.from_quote.anyOf@ in the specification.
--
-- Details of the quote that was cloned. See the [cloning documentation](https:\\\/\\\/stripe.com\\\/docs\\\/quotes\\\/clone) for more details.
data QuoteFromQuote' = QuoteFromQuote'
  { -- | is_revision: Whether this quote is a revision of a different quote.
    quoteFromQuote'IsRevision :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | quote: The quote that was cloned.
    quoteFromQuote'Quote :: (GHC.Maybe.Maybe QuoteFromQuote'Quote'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuoteFromQuote' where
  toJSON obj = Data.Aeson.Types.Internal.object ("is_revision" Data.Aeson.Types.ToJSON..= quoteFromQuote'IsRevision obj : "quote" Data.Aeson.Types.ToJSON..= quoteFromQuote'Quote obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("is_revision" Data.Aeson.Types.ToJSON..= quoteFromQuote'IsRevision obj) GHC.Base.<> ("quote" Data.Aeson.Types.ToJSON..= quoteFromQuote'Quote obj))

instance Data.Aeson.Types.FromJSON.FromJSON QuoteFromQuote' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteFromQuote'" (\obj -> (GHC.Base.pure QuoteFromQuote' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_revision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quote"))

-- | Create a new 'QuoteFromQuote'' with all required fields.
mkQuoteFromQuote' :: QuoteFromQuote'
mkQuoteFromQuote' =
  QuoteFromQuote'
    { quoteFromQuote'IsRevision = GHC.Maybe.Nothing,
      quoteFromQuote'Quote = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.quote.properties.from_quote.anyOf.properties.quote.anyOf@ in the specification.
--
-- The quote that was cloned.
data QuoteFromQuote'Quote'Variants
  = QuoteFromQuote'Quote'Text Data.Text.Internal.Text
  | QuoteFromQuote'Quote'Quote Quote
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteFromQuote'Quote'Variants where
  toJSON (QuoteFromQuote'Quote'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteFromQuote'Quote'Quote a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteFromQuote'Quote'Variants where
  parseJSON val = case (QuoteFromQuote'Quote'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteFromQuote'Quote'Quote Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.quote.properties.invoice.anyOf@ in the specification.
--
-- The invoice that was created from this quote.
data QuoteInvoice'Variants
  = QuoteInvoice'Text Data.Text.Internal.Text
  | QuoteInvoice'Invoice Invoice
  | QuoteInvoice'DeletedInvoice DeletedInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteInvoice'Variants where
  toJSON (QuoteInvoice'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteInvoice'Invoice a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteInvoice'DeletedInvoice a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteInvoice'Variants where
  parseJSON val = case (QuoteInvoice'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteInvoice'Invoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteInvoice'DeletedInvoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.quote.properties.invoice_settings.anyOf@ in the specification.
--
-- All invoices will be billed using the specified settings.
data QuoteInvoiceSettings' = QuoteInvoiceSettings'
  { -- | days_until_due: Number of days within which a customer must pay invoices generated by this quote. This value will be \`null\` for quotes where \`collection_method=charge_automatically\`.
    quoteInvoiceSettings'DaysUntilDue :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuoteInvoiceSettings' where
  toJSON obj = Data.Aeson.Types.Internal.object ("days_until_due" Data.Aeson.Types.ToJSON..= quoteInvoiceSettings'DaysUntilDue obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("days_until_due" Data.Aeson.Types.ToJSON..= quoteInvoiceSettings'DaysUntilDue obj)

instance Data.Aeson.Types.FromJSON.FromJSON QuoteInvoiceSettings' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteInvoiceSettings'" (\obj -> GHC.Base.pure QuoteInvoiceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "days_until_due"))

-- | Create a new 'QuoteInvoiceSettings'' with all required fields.
mkQuoteInvoiceSettings' :: QuoteInvoiceSettings'
mkQuoteInvoiceSettings' = QuoteInvoiceSettings' {quoteInvoiceSettings'DaysUntilDue = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.quote.properties.line_items@ in the specification.
--
-- A list of items the customer is being quoted for.
data QuoteLineItems' = QuoteLineItems'
  { -- | data: Details about each object.
    quoteLineItems'Data :: ([Item]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    quoteLineItems'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quoteLineItems'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuoteLineItems' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= quoteLineItems'Data obj : "has_more" Data.Aeson.Types.ToJSON..= quoteLineItems'HasMore obj : "url" Data.Aeson.Types.ToJSON..= quoteLineItems'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= quoteLineItems'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= quoteLineItems'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= quoteLineItems'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON QuoteLineItems' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteLineItems'" (\obj -> ((GHC.Base.pure QuoteLineItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'QuoteLineItems'' with all required fields.
mkQuoteLineItems' ::
  -- | 'quoteLineItems'Data'
  [Item] ->
  -- | 'quoteLineItems'HasMore'
  GHC.Types.Bool ->
  -- | 'quoteLineItems'Url'
  Data.Text.Internal.Text ->
  QuoteLineItems'
mkQuoteLineItems' quoteLineItems'Data quoteLineItems'HasMore quoteLineItems'Url =
  QuoteLineItems'
    { quoteLineItems'Data = quoteLineItems'Data,
      quoteLineItems'HasMore = quoteLineItems'HasMore,
      quoteLineItems'Url = quoteLineItems'Url
    }

-- | Defines the oneOf schema located at @components.schemas.quote.properties.on_behalf_of.anyOf@ in the specification.
--
-- The account on behalf of which to charge. See the [Connect documentation](https:\/\/support.stripe.com\/questions\/sending-invoices-on-behalf-of-connected-accounts) for details.
data QuoteOnBehalfOf'Variants
  = QuoteOnBehalfOf'Text Data.Text.Internal.Text
  | QuoteOnBehalfOf'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteOnBehalfOf'Variants where
  toJSON (QuoteOnBehalfOf'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteOnBehalfOf'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteOnBehalfOf'Variants where
  parseJSON val = case (QuoteOnBehalfOf'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteOnBehalfOf'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.quote.properties.status@ in the specification.
--
-- The status of the quote.
data QuoteStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    QuoteStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    QuoteStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"accepted"@
    QuoteStatus'EnumAccepted
  | -- | Represents the JSON value @"canceled"@
    QuoteStatus'EnumCanceled
  | -- | Represents the JSON value @"draft"@
    QuoteStatus'EnumDraft
  | -- | Represents the JSON value @"open"@
    QuoteStatus'EnumOpen
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteStatus' where
  toJSON (QuoteStatus'Other val) = val
  toJSON (QuoteStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (QuoteStatus'EnumAccepted) = "accepted"
  toJSON (QuoteStatus'EnumCanceled) = "canceled"
  toJSON (QuoteStatus'EnumDraft) = "draft"
  toJSON (QuoteStatus'EnumOpen) = "open"

instance Data.Aeson.Types.FromJSON.FromJSON QuoteStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "accepted" -> QuoteStatus'EnumAccepted
            | val GHC.Classes.== "canceled" -> QuoteStatus'EnumCanceled
            | val GHC.Classes.== "draft" -> QuoteStatus'EnumDraft
            | val GHC.Classes.== "open" -> QuoteStatus'EnumOpen
            | GHC.Base.otherwise -> QuoteStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.quote.properties.subscription.anyOf@ in the specification.
--
-- The subscription that was created or updated from this quote.
data QuoteSubscription'Variants
  = QuoteSubscription'Text Data.Text.Internal.Text
  | QuoteSubscription'Subscription Subscription
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteSubscription'Variants where
  toJSON (QuoteSubscription'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteSubscription'Subscription a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteSubscription'Variants where
  parseJSON val = case (QuoteSubscription'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteSubscription'Subscription Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.quote.properties.subscription_schedule.anyOf@ in the specification.
--
-- The subscription schedule that was created or updated from this quote.
data QuoteSubscriptionSchedule'Variants
  = QuoteSubscriptionSchedule'Text Data.Text.Internal.Text
  | QuoteSubscriptionSchedule'SubscriptionSchedule SubscriptionSchedule
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteSubscriptionSchedule'Variants where
  toJSON (QuoteSubscriptionSchedule'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteSubscriptionSchedule'SubscriptionSchedule a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteSubscriptionSchedule'Variants where
  parseJSON val = case (QuoteSubscriptionSchedule'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteSubscriptionSchedule'SubscriptionSchedule Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.quote.properties.transfer_data.anyOf@ in the specification.
--
-- The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
data QuoteTransferData' = QuoteTransferData'
  { -- | amount: The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
    quoteTransferData'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
    quoteTransferData'AmountPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | destination: The account where funds from the payment will be transferred to upon payment success.
    quoteTransferData'Destination :: (GHC.Maybe.Maybe QuoteTransferData'Destination'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuoteTransferData' where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= quoteTransferData'Amount obj : "amount_percent" Data.Aeson.Types.ToJSON..= quoteTransferData'AmountPercent obj : "destination" Data.Aeson.Types.ToJSON..= quoteTransferData'Destination obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= quoteTransferData'Amount obj) GHC.Base.<> (("amount_percent" Data.Aeson.Types.ToJSON..= quoteTransferData'AmountPercent obj) GHC.Base.<> ("destination" Data.Aeson.Types.ToJSON..= quoteTransferData'Destination obj)))

instance Data.Aeson.Types.FromJSON.FromJSON QuoteTransferData' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteTransferData'" (\obj -> ((GHC.Base.pure QuoteTransferData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination"))

-- | Create a new 'QuoteTransferData'' with all required fields.
mkQuoteTransferData' :: QuoteTransferData'
mkQuoteTransferData' =
  QuoteTransferData'
    { quoteTransferData'Amount = GHC.Maybe.Nothing,
      quoteTransferData'AmountPercent = GHC.Maybe.Nothing,
      quoteTransferData'Destination = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.quote.properties.transfer_data.anyOf.properties.destination.anyOf@ in the specification.
--
-- The account where funds from the payment will be transferred to upon payment success.
data QuoteTransferData'Destination'Variants
  = QuoteTransferData'Destination'Text Data.Text.Internal.Text
  | QuoteTransferData'Destination'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuoteTransferData'Destination'Variants where
  toJSON (QuoteTransferData'Destination'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuoteTransferData'Destination'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuoteTransferData'Destination'Variants where
  parseJSON val = case (QuoteTransferData'Destination'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteTransferData'Destination'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
