{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionsResourcePaymentSettings
module StripeAPI.Types.SubscriptionsResourcePaymentSettings where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsAcssDebitMandateOptions
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsBancontact
import {-# SOURCE #-} StripeAPI.Types.SubscriptionPaymentMethodOptionsCard
import {-# SOURCE #-} StripeAPI.Types.SubscriptionsResourcePaymentMethodOptions
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_settings@ in the specification.
data SubscriptionsResourcePaymentSettings = SubscriptionsResourcePaymentSettings
  { -- | payment_method_options: Payment-method-specific configuration to provide to invoices created by the subscription.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'),
    -- | payment_method_types: The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https:\/\/dashboard.stripe.com\/settings\/billing\/invoice).
    subscriptionsResourcePaymentSettingsPaymentMethodTypes :: (GHC.Maybe.Maybe ([SubscriptionsResourcePaymentSettingsPaymentMethodTypes']))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettings where
  toJSON obj = Data.Aeson.Types.Internal.object ("payment_method_options" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions obj : "payment_method_types" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodTypes obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("payment_method_options" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions obj) GHC.Base.<> ("payment_method_types" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodTypes obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettings where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentSettings" (\obj -> (GHC.Base.pure SubscriptionsResourcePaymentSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_types"))

-- | Create a new 'SubscriptionsResourcePaymentSettings' with all required fields.
mkSubscriptionsResourcePaymentSettings :: SubscriptionsResourcePaymentSettings
mkSubscriptionsResourcePaymentSettings =
  SubscriptionsResourcePaymentSettings
    { subscriptionsResourcePaymentSettingsPaymentMethodOptions = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentSettingsPaymentMethodTypes = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf@ in the specification.
--
-- Payment-method-specific configuration to provide to invoices created by the subscription.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'
  { -- | acss_debit: This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'),
    -- | bancontact: This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'),
    -- | card: This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions' where
  toJSON obj = Data.Aeson.Types.Internal.object ("acss_debit" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit obj : "bancontact" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact obj : "card" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acss_debit" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit obj) GHC.Base.<> (("bancontact" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact obj) GHC.Base.<> ("card" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card obj)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentSettingsPaymentMethodOptions'" (\obj -> ((GHC.Base.pure SubscriptionsResourcePaymentSettingsPaymentMethodOptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card"))

-- | Create a new 'SubscriptionsResourcePaymentSettingsPaymentMethodOptions'' with all required fields.
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions' :: SubscriptionsResourcePaymentSettingsPaymentMethodOptions'
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions' =
  SubscriptionsResourcePaymentSettingsPaymentMethodOptions'
    { subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.acss_debit.anyOf@ in the specification.
--
-- This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'
  { -- | mandate_options:
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'MandateOptions :: (GHC.Maybe.Maybe InvoicePaymentMethodOptionsAcssDebitMandateOptions),
    -- | verification_method: Bank account verification method.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object ("mandate_options" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'MandateOptions obj : "verification_method" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("mandate_options" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'MandateOptions obj) GHC.Base.<> ("verification_method" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'" (\obj -> (GHC.Base.pure SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification_method"))

-- | Create a new 'SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'' with all required fields.
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' :: SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit' =
  SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'
    { subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'MandateOptions = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod' where
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'Other val) = val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'AcssDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.bancontact.anyOf@ in the specification.
--
-- This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'
  { -- | preferred_language: Preferred language of the Bancontact authorization page that the customer is redirected to.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' where
  toJSON obj = Data.Aeson.Types.Internal.object ("preferred_language" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("preferred_language" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage obj)

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'" (\obj -> GHC.Base.pure SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "preferred_language"))

-- | Create a new 'SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'' with all required fields.
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' :: SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact' {subscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.bancontact.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the Bancontact authorization page that the customer is redirected to.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumDe
  | -- | Represents the JSON value @"en"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumEn
  | -- | Represents the JSON value @"fr"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumFr
  | -- | Represents the JSON value @"nl"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumNl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage' where
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'Other val) = val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumDe) = "de"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumEn) = "en"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumFr) = "fr"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumNl) = "nl"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "de" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumDe
            | val GHC.Classes.== "en" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumEn
            | val GHC.Classes.== "fr" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumFr
            | val GHC.Classes.== "nl" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'EnumNl
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Bancontact'PreferredLanguage'Other val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.card.anyOf@ in the specification.
--
-- This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'
  { -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' where
  toJSON obj = Data.Aeson.Types.Internal.object ("request_three_d_secure" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("request_three_d_secure" Data.Aeson.Types.ToJSON..= subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure obj)

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'" (\obj -> GHC.Base.pure SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_three_d_secure"))

-- | Create a new 'SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'' with all required fields.
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' :: SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'
mkSubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' = SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card' {subscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_options.anyOf.properties.card.anyOf.properties.request_three_d_secure@ in the specification.
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"any"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAny
  | -- | Represents the JSON value @"automatic"@
    SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAutomatic
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure' where
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'Other val) = val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAny) = "any"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAutomatic) = "automatic"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "any" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAny
            | val GHC.Classes.== "automatic" -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'EnumAutomatic
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentSettingsPaymentMethodOptions'Card'RequestThreeDSecure'Other val
      )

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_settings.properties.payment_method_types.items@ in the specification.
data SubscriptionsResourcePaymentSettingsPaymentMethodTypes'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach_credit_transfer"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchCreditTransfer
  | -- | Represents the JSON value @"ach_debit"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchDebit
  | -- | Represents the JSON value @"acss_debit"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAcssDebit
  | -- | Represents the JSON value @"au_becs_debit"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAuBecsDebit
  | -- | Represents the JSON value @"bacs_debit"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBacsDebit
  | -- | Represents the JSON value @"bancontact"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBancontact
  | -- | Represents the JSON value @"boleto"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBoleto
  | -- | Represents the JSON value @"card"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumCard
  | -- | Represents the JSON value @"fpx"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumFpx
  | -- | Represents the JSON value @"giropay"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumGiropay
  | -- | Represents the JSON value @"ideal"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumIdeal
  | -- | Represents the JSON value @"sepa_debit"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSofort
  | -- | Represents the JSON value @"wechat_pay"@
    SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumWechatPay
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentSettingsPaymentMethodTypes' where
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'Other val) = val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchCreditTransfer) = "ach_credit_transfer"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchDebit) = "ach_debit"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAcssDebit) = "acss_debit"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAuBecsDebit) = "au_becs_debit"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBacsDebit) = "bacs_debit"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBancontact) = "bancontact"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBoleto) = "boleto"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumCard) = "card"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumFpx) = "fpx"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumGiropay) = "giropay"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumIdeal) = "ideal"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSepaDebit) = "sepa_debit"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSofort) = "sofort"
  toJSON (SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumWechatPay) = "wechat_pay"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentSettingsPaymentMethodTypes' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach_credit_transfer" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchCreditTransfer
            | val GHC.Classes.== "ach_debit" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAchDebit
            | val GHC.Classes.== "acss_debit" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAcssDebit
            | val GHC.Classes.== "au_becs_debit" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumAuBecsDebit
            | val GHC.Classes.== "bacs_debit" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBacsDebit
            | val GHC.Classes.== "bancontact" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBancontact
            | val GHC.Classes.== "boleto" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumBoleto
            | val GHC.Classes.== "card" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumCard
            | val GHC.Classes.== "fpx" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumFpx
            | val GHC.Classes.== "giropay" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumGiropay
            | val GHC.Classes.== "ideal" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumIdeal
            | val GHC.Classes.== "sepa_debit" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSepaDebit
            | val GHC.Classes.== "sofort" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumSofort
            | val GHC.Classes.== "wechat_pay" -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'EnumWechatPay
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentSettingsPaymentMethodTypes'Other val
      )
