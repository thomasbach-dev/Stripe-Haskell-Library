{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodOptionsWechatPay
module StripeAPI.Types.PaymentMethodOptionsWechatPay where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_options_wechat_pay@ in the specification.
data PaymentMethodOptionsWechatPay = PaymentMethodOptionsWechatPay
  { -- | app_id: The app ID registered with WeChat Pay. Only required when client is ios or android.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodOptionsWechatPayAppId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | client: The client type that the end customer will pay from
    paymentMethodOptionsWechatPayClient :: (GHC.Maybe.Maybe PaymentMethodOptionsWechatPayClient')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsWechatPay where
  toJSON obj = Data.Aeson.Types.Internal.object ("app_id" Data.Aeson.Types.ToJSON..= paymentMethodOptionsWechatPayAppId obj : "client" Data.Aeson.Types.ToJSON..= paymentMethodOptionsWechatPayClient obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("app_id" Data.Aeson.Types.ToJSON..= paymentMethodOptionsWechatPayAppId obj) GHC.Base.<> ("client" Data.Aeson.Types.ToJSON..= paymentMethodOptionsWechatPayClient obj))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsWechatPay where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsWechatPay" (\obj -> (GHC.Base.pure PaymentMethodOptionsWechatPay GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "app_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client"))

-- | Create a new 'PaymentMethodOptionsWechatPay' with all required fields.
mkPaymentMethodOptionsWechatPay :: PaymentMethodOptionsWechatPay
mkPaymentMethodOptionsWechatPay =
  PaymentMethodOptionsWechatPay
    { paymentMethodOptionsWechatPayAppId = GHC.Maybe.Nothing,
      paymentMethodOptionsWechatPayClient = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_options_wechat_pay.properties.client@ in the specification.
--
-- The client type that the end customer will pay from
data PaymentMethodOptionsWechatPayClient'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodOptionsWechatPayClient'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodOptionsWechatPayClient'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"android"@
    PaymentMethodOptionsWechatPayClient'EnumAndroid
  | -- | Represents the JSON value @"ios"@
    PaymentMethodOptionsWechatPayClient'EnumIos
  | -- | Represents the JSON value @"web"@
    PaymentMethodOptionsWechatPayClient'EnumWeb
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsWechatPayClient' where
  toJSON (PaymentMethodOptionsWechatPayClient'Other val) = val
  toJSON (PaymentMethodOptionsWechatPayClient'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodOptionsWechatPayClient'EnumAndroid) = "android"
  toJSON (PaymentMethodOptionsWechatPayClient'EnumIos) = "ios"
  toJSON (PaymentMethodOptionsWechatPayClient'EnumWeb) = "web"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsWechatPayClient' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "android" -> PaymentMethodOptionsWechatPayClient'EnumAndroid
            | val GHC.Classes.== "ios" -> PaymentMethodOptionsWechatPayClient'EnumIos
            | val GHC.Classes.== "web" -> PaymentMethodOptionsWechatPayClient'EnumWeb
            | GHC.Base.otherwise -> PaymentMethodOptionsWechatPayClient'Other val
      )
